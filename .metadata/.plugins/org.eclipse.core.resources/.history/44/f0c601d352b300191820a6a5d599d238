package ApiTest;

import org.apache.commons.io.IOUtils;
import org.apache.commons.io.output.WriterOutputStream;
import org.hamcrest.Matchers;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Reporter;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import com.relevantcodes.extentreports.LogStatus;

import Guests.LoginInputData;
import Guests.RegisterInputData;
import Guests.SendEmailVerifyInputData;
import Guests.UpdateEmail;
import Library.ExcelReader;
import Library.MainAPI;
import io.restassured.RestAssured;
import io.restassured.filter.log.RequestLoggingFilter;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import io.restassured.response.ValidatableResponse;
import io.restassured.specification.RequestSpecification;
import listeners.BaseClass;
import listeners.ExtentTestManager;
import static io.restassured.RestAssured.given;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.io.StringWriter;
import java.util.Map;
import java.util.Properties;

public class APITest extends BaseClass{
	
	
	WebDriver driver;
	String accessToken;
	String verifyCode;
	public  StringWriter requestWriter;
	public  PrintStream requestCapture;
	
	public static Properties Config =new Properties();
	MainAPI mainapi=new MainAPI();
	
	@BeforeTest
	public void setUp() throws IOException {
		
			FileInputStream fis = new FileInputStream(System.getProperty("user.dir")+"\\src\\main\\java\\Config\\config.properties");
			Config.load(fis);
			
			requestWriter=new StringWriter();
			requestCapture=new PrintStream(new WriterOutputStream(requestWriter),true);
	}

	String currentDir=System.getProperty("user.dir")+File.separator+"Library\\VaultData.xlsx";
	
	@DataProvider(name="RegisterData")
	public Object[][] FetchRegisterData() throws Exception
	{
		ExcelReader excel=new ExcelReader();
		return excel.readFilenSheet(currentDir, "register");
	}
	
	
	
	@Test(dataProvider = "RegisterData",priority=1)
	 public void registerUser(Map mObj) throws IOException
		{
		String firstName=(String) mObj.get("firstName");
		String lastName=(String) mObj.get("lastName");
		String password=(String) mObj.get("password");
		String email=(String) mObj.get("email");
		String testcasename=(String) mObj.get("TestCaseName");
		
		requestWriter=new StringWriter();
		requestCapture=new PrintStream(new WriterOutputStream(requestWriter),true);
	
		 RegisterInputData registerInputData = new RegisterInputData(firstName,lastName,password,email);
		 RestAssured.baseURI=Config.getProperty("url");	
			ValidatableResponse  response = 
					given()
						.log().all()
						.filter(new RequestLoggingFilter(requestCapture))
						.contentType(ContentType.JSON)
						.redirects()
						.follow(false)
						.body(registerInputData)
					.when()   
						.post("/user/register")
					.then();
					
            //System.err.print(requestWriter.toString());
			//Reporter.log("Response is: " + response.extract().asString(), true);
			ExtentTestManager.getTest().log(LogStatus.INFO, "Request is: " + requestWriter.toString());
			ExtentTestManager.getTest().log(LogStatus.INFO, "Test Case Name : " +  testcasename );
			ExtentTestManager.getTest().log(LogStatus.INFO, "Response is: " + response.extract().asString());			

			response.statusCode(200);
			response.body("message", Matchers.notNullValue());
			ExtentTestManager.getTest().log(LogStatus.INFO, "Have verified the Status Code Successfully !!");

		}
		

	@DataProvider(name="SendVerifyEmail")
	public Object[][] FetchRegisterVerifyData() throws Exception
	{
		ExcelReader excel=new ExcelReader();
		return excel.readFilenSheet(currentDir, "SendEmailVerify");
	}

	
	@Test(dataProvider = "SendVerifyEmail",priority=2)
	 public void SendVerifyEmail(Map mObj) throws IOException
		{
	    String email=(String) mObj.get("email");
	    String testcasename=(String) mObj.get("TestCaseName");
	    requestWriter=new StringWriter();
		requestCapture=new PrintStream(new WriterOutputStream(requestWriter),true);

	    
		SendEmailVerifyInputData registerInputData = new SendEmailVerifyInputData(email);
		RestAssured.baseURI=Config.getProperty("url");	
		ValidatableResponse res =
				given()
				.log().all()
				.filter(new RequestLoggingFilter(requestCapture))
				.contentType(ContentType.JSON)
				.redirects()
				.follow(false)
				.body(registerInputData)
			.when()   
				.post("/user/sendEmailVerification")
			.then();
                                                                                                                                                                                                                                                              
		Reporter.log("Response is: " + res.extract().asString(), true);
		ExtentTestManager.getTest().log(LogStatus.INFO, "Request  is: " + requestWriter.toString());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Test Case Name : " +  testcasename );
		ExtentTestManager.getTest().log(LogStatus.INFO, "Response is: " + res.extract().asString());
		

		res.statusCode(200);
		res.body("message", Matchers.notNullValue());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Have verified the Status Code Successfully !!");		
					
		}
	
	
	@DataProvider(name="VerifyEmail")
	public Object[][] VerifyEmailData() throws Exception
	{
		ExcelReader excel=new ExcelReader();
		return excel.readFilenSheet(currentDir, "VerifyEmail");
	}
	
	@Test(dataProvider = "VerifyEmail",priority=3)
	public void VerifyEmailLink(Map mObj)
	{
	try
	{
		
	String email=(String) mObj.get("email");
    String testcasename=(String) mObj.get("TestCaseName");
    
    
	System.setProperty("webdriver.chrome.driver","C:\\Users\\yangjee\\Desktop\\chromedriver\\chromedriver.exe");
	driver=new ChromeDriver();
	driver.manage().window().maximize();
	driver.get("https://getnada.com/");
	driver.findElement(By.xpath("//*[@id=\"app\"]/div/div[2]/div[1]/div/div[2]/nav/a[2]/span")).click();
	driver.findElement(By.xpath("//input[@class='user_name']")).clear();//enter email
	driver.findElement(By.xpath("//input[@class='user_name']")).sendKeys(email);//enter email
	driver.findElement(By.xpath("//*[@id='app']/div/div[1]/footer/a[2]")).click();//click inbox
	Thread.sleep(2000);
	driver.findElement(By.xpath("//*[@id=\"app\"]/div/div[2]/div[2]/div[1]/div[2]/div/div[2]/div/div[1]/ul/li/div/div[2]")).click();
	Thread.sleep(5000);
    driver.switchTo().frame("idIframe");
    driver.findElement(By.linkText("Click To Verify Email")).click(); 
    System.out.println(email + " Email has been successfully verified.");
   
   
   ExtentTestManager.getTest().log(LogStatus.INFO, "Test Case Name : " +  testcasename );
   ExtentTestManager.getTest().log(LogStatus.INFO, "Have verified the Status Code Successfully !!");		
	
	}
      
      catch (Exception e)
      {
        System.out.println("error "+e);
    }
	
	}



	
	@Test(priority=4)
	 public void Login() throws IOException
		{

		requestWriter=new StringWriter();
		requestCapture=new PrintStream(new WriterOutputStream(requestWriter),true);

		FileInputStream fileInputStream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\main\\java\\JsonFiles\\login.json"));	
		RestAssured.baseURI=Config.getProperty("url");	
		ValidatableResponse res =
				given()
				.log().all()
				.filter(new RequestLoggingFilter(requestCapture))
				.contentType(ContentType.JSON)
				.redirects()
				.follow(false)
				.body(IOUtils.toString(fileInputStream, "UTF-8"))
			.when()   
				.post("/user/login")
			.then();
          
		accessToken = res.extract().header("accessToken");
		
		Reporter.log("Response is: " + res.extract().asString(), true);
		ExtentTestManager.getTest().log(LogStatus.INFO, "Request  is: " + requestWriter.toString());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Test Case Name : " +  "Verify login with valid data" );
		ExtentTestManager.getTest().log(LogStatus.INFO, "Response is: " + res.extract().asString());	
		ExtentTestManager.getTest().log(LogStatus.INFO, "Token : " +  accessToken );

		res.statusCode(200);
		res.body("message", Matchers.notNullValue());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Have verified the Status Code Successfully !!");		
					
		}
	
	@Test(priority=5)
	 public void ForgotPassword() throws IOException
		{
		requestWriter=new StringWriter();
		requestCapture=new PrintStream(new WriterOutputStream(requestWriter),true);
    
		FileInputStream fileInputStream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\main\\java\\JsonFiles\\forgotpwd.json"));	
		RestAssured.baseURI=Config.getProperty("url");	
		ValidatableResponse res =
				given()
				.log().all()
				.filter(new RequestLoggingFilter(requestCapture))
				.contentType(ContentType.JSON)
				.redirects()
				.follow(false)
				.body(IOUtils.toString(fileInputStream, "UTF-8"))
			.when()   
				.post("/user/forgotPassword")
			.then();
         
		Reporter.log("Response is: " + res.extract().asString(), true);
		
		ExtentTestManager.getTest().log(LogStatus.INFO, "Request  is: " + requestWriter.toString());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Test Case Name : " +  "Verify with valid data" );
		ExtentTestManager.getTest().log(LogStatus.INFO, "Response is: " + res.extract().asString());	
		res.statusCode(200);
		res.body("message", Matchers.notNullValue());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Have verified the Status Code Successfully !!");		
					
		}
	
	
	//@Test(priority=5)
	 public void ResetPassword() throws IOException
		{

		 requestWriter=new StringWriter();
		 requestCapture=new PrintStream(new WriterOutputStream(requestWriter),true);

		FileInputStream fileInputStream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\main\\java\\JsonFiles\\resetpwd.json"));	
		RestAssured.baseURI=Config.getProperty("url");	
		ValidatableResponse res =
				given()
				.log().all()
				.filter(new RequestLoggingFilter(requestCapture))
				.contentType(ContentType.JSON)
				.redirects()
				.follow(false)
				.body(IOUtils.toString(fileInputStream, "UTF-8"))
			.when()   
				.post("/user/resetPassword")
			.then();
   
		
		Reporter.log("Response is: " + res.extract().asString(), true);
		ExtentTestManager.getTest().log(LogStatus.INFO, "Request  is: " + requestWriter.toString());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Test Case Name : " +  "Verify with valid data" );
		ExtentTestManager.getTest().log(LogStatus.INFO, "Response is: " + res.extract().asString());	

		res.statusCode(200);
		res.body("message", Matchers.notNullValue());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Have verified the Status Code Successfully !!");		
					
		}
	 
	@Test(priority=6)
		 public void GetPageContent() throws IOException
			{

		RestAssured.baseURI=Config.getProperty("url");	
			ValidatableResponse res =
					given()
					.log().all()
					.filter(new RequestLoggingFilter(requestCapture))
					.contentType(ContentType.JSON)
					.queryParam("page", "termsCondition")
					.queryParam("page", "privacyPolicy")
					.redirects()
					.follow(false)
				.when()   
					.get("/user/pageContent")
				.then();
	   
			
			Reporter.log("Response is: " + res.extract().asString(), true);
			ExtentTestManager.getTest().log(LogStatus.INFO, "Request  is: " + requestWriter.toString());
			ExtentTestManager.getTest().log(LogStatus.INFO, "Response is: " + res.extract().asString());	

			res.statusCode(200);
			res.body("message", Matchers.notNullValue());
			ExtentTestManager.getTest().log(LogStatus.INFO, "Have verified the Status Code Successfully !!");		
						
			}
	
	@Test(priority=7)
	 public void GetRefreshToken() throws IOException
		{


		RestAssured.baseURI=Config.getProperty("url");	
		ValidatableResponse res =
				given()
				.filter(new RequestLoggingFilter(requestCapture))
				.log().all()
				.contentType(ContentType.JSON)
				.queryParam("refreshToken",accessToken)	
			.when()   
				.get("/user/refreshToken")
			.then();
 
		
		Reporter.log("Response is: " + res.extract().asString(), true);
		ExtentTestManager.getTest().log(LogStatus.INFO, "Request  is: " + requestWriter.toString());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Response is: " + res.extract().asString());	

		res.statusCode(200);
		res.body("message", Matchers.notNullValue());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Have verified the Status Code Successfully !!");		
					
		}
	
	@Test(priority=8)
	 public void updateProfile() throws IOException
		{

		FileInputStream fileInputStream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\main\\java\\JsonFiles\\updateProfile.json"));	    
		RestAssured.baseURI=Config.getProperty("url");	
		ValidatableResponse res =
				given()
				.log().all()
				.filter(new RequestLoggingFilter(requestCapture))
				.header("Authorization",accessToken)
				.contentType(ContentType.JSON)
				.body(IOUtils.toString(fileInputStream,"UTF-8"))
			.when()   
				.post("/user/updateProfile")
			.then();
 
		
		Reporter.log("Response is: " + res.extract().asString(), true);
		ExtentTestManager.getTest().log(LogStatus.INFO, "Request  is: " + requestWriter.toString());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Response is: " + res.extract().asString());	

		res.statusCode(200);
		res.body("message", Matchers.notNullValue());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Have verified the Status Code Successfully !!");		
					
		}
	
	
	@Test(priority=9)
		 public void changePassword() throws IOException
			{

		    
			FileInputStream fileInputStream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\main\\java\\JsonFiles\\changepwd.json"));	
			RestAssured.baseURI=Config.getProperty("url");	
			ValidatableResponse res =
					given()
					.log().all()
					.filter(new RequestLoggingFilter(requestCapture))
					.contentType(ContentType.JSON)
					.header("Authorization",accessToken)
					.body(IOUtils.toString(fileInputStream, "UTF-8"))
				.when()   
					.post("/user/changePassword")
				.then();
	   
			
			Reporter.log("Response is: " + res.extract().asString(), true);

			ExtentTestManager.getTest().log(LogStatus.INFO, "Test Case Name : " +  "Verify with valid data" );
			ExtentTestManager.getTest().log(LogStatus.INFO, "Request  is: " + requestWriter.toString());
			ExtentTestManager.getTest().log(LogStatus.INFO, "Response is: " + res.extract().asString());	

			res.statusCode(200);
			res.body("message", Matchers.notNullValue());
			ExtentTestManager.getTest().log(LogStatus.INFO, "Have verified the Status Code Successfully !!");		
						
			}
	
	//@Test(priority=10)
	 public void updatePin() throws IOException
		{

	    
		FileInputStream fileInputStream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\main\\java\\JsonFiles\\changePin.json"));	
		RestAssured.baseURI=Config.getProperty("url");	
		ValidatableResponse res =
				given()
				.log().all()
				.filter(new RequestLoggingFilter(requestCapture))
				.contentType(ContentType.JSON)
				.header("Authorization",accessToken)
				.body(IOUtils.toString(fileInputStream, "UTF-8"))
			.when()   
				.post("/user/updateNewPin")
			.then();
  
		
		Reporter.log("Response is: " + res.extract().asString(), true);

		ExtentTestManager.getTest().log(LogStatus.INFO, "Test Case Name : " +  "Verify with valid data" );
		ExtentTestManager.getTest().log(LogStatus.INFO, "Request  is: " + requestWriter.toString());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Response is: " + res.extract().asString());	

		res.statusCode(200);
		res.body("message", Matchers.notNullValue());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Have verified the Status Code Successfully !!");		
					
		}
	
	@Test(priority=10)
	 public void newEmailVerify() throws IOException
		{

	    
		FileInputStream fileInputStream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\main\\java\\JsonFiles\\verifyEmail.json"));	
		RestAssured.baseURI=Config.getProperty("url");	
		ValidatableResponse res =
				given()
				.log().all()
				.filter(new RequestLoggingFilter(requestCapture))
				.contentType(ContentType.JSON)
				.header("Authorization",accessToken)
				.body(IOUtils.toString(fileInputStream, "UTF-8"))
			.when()   
				.post("/user/newEmailVerification")
			.then();
 
		
		Reporter.log("Response is: " + res.extract().asString(), true);

		ExtentTestManager.getTest().log(LogStatus.INFO, "Test Case Name : " +  "Verify with valid data" );
		ExtentTestManager.getTest().log(LogStatus.INFO, "Request  is: " + requestWriter.toString());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Response is: " + res.extract().asString());	

		res.statusCode(200);
		res.body("message", Matchers.notNullValue());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Have verified the Status Code Successfully !!");		
					
		}
	
	
	@DataProvider(name="GetVerifyEmail")
	public Object[][] FetchVerifyEmailData() throws Exception
	{
		ExcelReader excel=new ExcelReader();
		return excel.readFilenSheet(currentDir, "VerifyEmail");
	}
	
	@Test(dataProvider = "GetVerifyEmail",priority=11)
	public void GetVerifyCode(Map mObj)
	{
	try
	{
		
	String email=(String) mObj.get("email");
    String testcasename=(String) mObj.get("TestCaseName");
    
    
	System.setProperty("webdriver.chrome.driver","C:\\Users\\yangjee\\Desktop\\chromedriver\\chromedriver.exe");
	driver=new ChromeDriver();
	driver.manage().window().maximize();
	driver.get("https://getnada.com/");
	driver.findElement(By.xpath("//*[@id=\"app\"]/div/div[2]/div[1]/div/div[2]/nav/a[2]/span")).click();
	driver.findElement(By.xpath("//input[@class='user_name']")).clear();//enter email
	driver.findElement(By.xpath("//input[@class='user_name']")).sendKeys(email);//enter email
	driver.findElement(By.xpath("//*[@id='app']/div/div[1]/footer/a[2]")).click();//click inbox
	Thread.sleep(2000);
	driver.findElement(By.xpath("//*[@id=\"app\"]/div/div[2]/div[2]/div[1]/div[2]/div/div[2]/div/div[1]/ul/li/div/div[2]")).click();
	Thread.sleep(5000);
    driver.switchTo().frame("idIframe");
    verifyCode=driver.findElement(By.xpath("/html/body/table/tbody/tr[3]/td/table/tbody/tr[2]/td/table/tbody/tr/td/table/tbody/tr/td/h1[1]")).getText();
    
   
   ExtentTestManager.getTest().log(LogStatus.INFO, "Test Case Name : " +  testcasename );
   ExtentTestManager.getTest().log(LogStatus.INFO, "Verification Code : " +  verifyCode );
   ExtentTestManager.getTest().log(LogStatus.INFO, "Have verified the Status Code Successfully !!");		
	
	}
      
      catch (Exception e)
      {
        System.out.println("error "+e);
    }
	}
	
	@Test(priority=12)
	 public void UpdateEmail() throws IOException
		{

	    UpdateEmail emailupdate=new UpdateEmail(verifyCode,"yangjee@getnada.com");
	    RestAssured.baseURI=Config.getProperty("url");	
		ValidatableResponse res =
				given()
				.log().all()
				.filter(new RequestLoggingFilter(requestCapture))
				.contentType(ContentType.JSON)
				.header("Authorization",accessToken)
				.body(emailupdate)
			.when()   
				.post("/user/newEmailVerification")
			.then();

		
		Reporter.log("Response is: " + res.extract().asString(), true);

		ExtentTestManager.getTest().log(LogStatus.INFO, "Test Case Name : " +  "Verify with valid data" );
		ExtentTestManager.getTest().log(LogStatus.INFO, "Request  is: " + requestWriter.toString());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Response is: " + res.extract().asString());	

		res.statusCode(200);
		res.body("message", Matchers.notNullValue());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Have verified the Status Code Successfully !!");		
					
		}
	
	@Test(priority=13)
	 public void LogOut() throws IOException
		{

		FileInputStream fileInputStream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\main\\java\\JsonFiles\\logout.json"));	
		RestAssured.baseURI=Config.getProperty("url");	
		ValidatableResponse res =
				given()
				.log().all()
				.filter(new RequestLoggingFilter(requestCapture))
				.contentType(ContentType.JSON)
				.header("Authorization",accessToken)
				.body(IOUtils.toString(fileInputStream,"UTF-8"))
			.when()   
				.post("/user/logout")
			.then();

		
		Reporter.log("Response is: " + res.extract().asString(), true);

		ExtentTestManager.getTest().log(LogStatus.INFO, "Test Case Name : " +  "Log out from device" );
		ExtentTestManager.getTest().log(LogStatus.INFO, "Request  is: " + requestWriter.toString());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Response is: " + res.extract().asString());	

		res.statusCode(200);
		res.body("message", Matchers.notNullValue());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Have verified the Status Code Successfully !!");		
					
		}
		
	@Test(priority=14)
	 public void GetUsers() throws IOException
		{

	    
		RestAssured.baseURI=Config.getProperty("url");	
		ValidatableResponse res =
				given()
				.log().all()
				.filter(new RequestLoggingFilter(requestCapture))
				.contentType(ContentType.JSON)
				.queryParam("refreshToken",accessToken)	
			.when()   
				.get("/user/test")
			.then();

		
		Reporter.log("Response is: " + res.extract().asString(), true);
		ExtentTestManager.getTest().log(LogStatus.INFO, "Request  is: " + requestWriter.toString());

		ExtentTestManager.getTest().log(LogStatus.INFO, "Response is: " + res.extract().asString());	

		res.statusCode(200);
		res.body("message", Matchers.notNullValue());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Have verified the Status Code Successfully !!");		
					
		}
	
	
	@Test(priority=15)
	 public void ProvideFeedback() throws IOException
		{

	    
		RestAssured.baseURI=Config.getProperty("url");	
		FileInputStream fileInputStream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\main\\java\\JsonFiles\\feedback.json"));	
		
		ValidatableResponse res =
				given()
				.log().all()
				.filter(new RequestLoggingFilter(requestCapture))
				.contentType(ContentType.JSON)
				.header("Authorization",accessToken)
				.body(IOUtils.toString(fileInputStream,"UTF-8"))
			.when()   
				.post("/user/feedback")
			.then();

		
		Reporter.log("Response is: " + res.extract().asString(), true);
		ExtentTestManager.getTest().log(LogStatus.INFO, "Request  is: " + requestWriter.toString());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Response is: " + res.extract().asString());	

		res.statusCode(200);
		res.body("message", Matchers.notNullValue());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Have verified the Status Code Successfully !!");		
					
		}
	
	
	@Test(priority=16)
	 public void PushNotify() throws IOException
		{

	    
		RestAssured.baseURI=Config.getProperty("url");	
		FileInputStream fileInputStream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\main\\java\\JsonFiles\\notify.json"));	
		
		ValidatableResponse res =
				given()
				.log().all()
				.filter(new RequestLoggingFilter(requestCapture))
				.contentType(ContentType.JSON)
				.header("Authorization",accessToken)
				.body(IOUtils.toString(fileInputStream,"UTF-8"))
			.when()   
				.post("/notifications/send-push-notifications")
			.then();

		
		Reporter.log("Response is: " + res.extract().asString(), true);
		ExtentTestManager.getTest().log(LogStatus.INFO, "Request  is: " + requestWriter.toString());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Response is: " + res.extract().asString());	

		res.statusCode(200);
		res.body("message", Matchers.notNullValue());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Have verified the Status Code Successfully !!");		
					
		}
	
	
	

	
	@Test(priority=17)
	 public void GetSubscription() throws IOException
		{

	    
		RestAssured.baseURI=Config.getProperty("url");	
	
		ValidatableResponse res =
				given()
				.log().all()
				.filter(new RequestLoggingFilter(requestCapture))
				.contentType(ContentType.JSON)
				.header("Authorization",accessToken)
			.when()   
				.get("/subscription/subscription-info")
			.then();

		
		Reporter.log("Response is: " + res.extract().asString(), true);
		ExtentTestManager.getTest().log(LogStatus.INFO, "Request  is: " + requestWriter.toString());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Response is: " + res.extract().asString());	

		res.statusCode(200);
		res.body("message", Matchers.notNullValue());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Have verified the Status Code Successfully !!");		
					
		}
	
	@Test(priority=18)
	 public void SubsAvail() throws IOException
		{

		FileInputStream fileInputStream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\main\\java\\JsonFiles\\subscription.json"));	
		RestAssured.baseURI=Config.getProperty("url");		
	
		ValidatableResponse res =
				given()
				.log().all()
				.filter(new RequestLoggingFilter(requestCapture))
				.contentType(ContentType.JSON)
				.header("Authorization",accessToken)
				.body(IOUtils.toString(fileInputStream,"UTF-8"))
			.when()   
				.post("/subscription/check-availability")
			.then();

		
		Reporter.log("Response is: " + res.extract().asString(), true);
		ExtentTestManager.getTest().log(LogStatus.INFO, "Request  is: " + requestWriter.toString());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Response is: " + res.extract().asString());	

		res.statusCode(200);
		res.body("message", Matchers.notNullValue());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Have verified the Status Code Successfully !!");		
					
		}
	
	@Test(priority=19)
	 public void GetSyncData() throws IOException
		{
		
		String[] param= {"family","assets","liabilities","executors","guardians","wishes","charities","beneficiaries","witnesses","pastWills"};
		String param_name="type";
		
		for(String all:param)
		{
		RestAssured.baseURI=Config.getProperty("url");	
	    String endpoint="/sync/getData";
	    mainapi.GetAPIWithParam(accessToken,endpoint,param_name,all);	 
		}
		}

	@Test(priority=20)
	 public void SyncAddUpdateFamily() throws IOException
		{

		FileInputStream fileInputStream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\main\\java\\JsonFiles\\familySync.json"));	
		RestAssured.baseURI=Config.getProperty("url");	
	    String endpoint="/familyOrFriend/addOrUpdateSync";
	    mainapi.PostAPI(accessToken,endpoint,fileInputStream);	    						
		}

	@Test(priority=21)
	 public void SyncAddUpdateAssets() throws IOException
		{

		FileInputStream fileInputStream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\main\\java\\JsonFiles\\assetsSync.json"));	
		RestAssured.baseURI=Config.getProperty("url");	
	    String endpoint="/sync/assets/addOrUpdateCategories";
	    mainapi.PostAPI(accessToken,endpoint,fileInputStream);	    						
		}
	
	@Test(priority=22)
	 public void SyncAddUpdateLiabilities() throws IOException
		{

		FileInputStream fileInputStream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\main\\java\\JsonFiles\\liabilitiesSync.json"));	
		RestAssured.baseURI=Config.getProperty("url");	
	    String endpoint="/sync/liabilities/addOrUpdateCategories";
	    mainapi.PostAPI(accessToken,endpoint,fileInputStream);	    						
		}
	
	@Test(priority=23)
	 public void SyncAddUpdateExecutors() throws IOException
		{

		FileInputStream fileInputStream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\main\\java\\JsonFiles\\executorSync.json"));	
		RestAssured.baseURI=Config.getProperty("url");	
	    String endpoint="/sync/executors/addOrUpdate";
	    mainapi.PostAPI(accessToken,endpoint,fileInputStream);	    						
		}
	
	@Test(priority=24)
	 public void SyncAddUpdateGuardians() throws IOException
		{

		FileInputStream fileInputStream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\main\\java\\JsonFiles\\guardianSync.json"));	
		RestAssured.baseURI=Config.getProperty("url");	
	    String endpoint="/sync/guardians/addOrUpdate";
	    mainapi.PostAPI(accessToken,endpoint,fileInputStream);	    						
		}
	
	
	@Test(priority=25)
	 public void SyncAddUpdateWishes() throws IOException
		{

		FileInputStream fileInputStream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\main\\java\\JsonFiles\\wishesSync.json"));	
		RestAssured.baseURI=Config.getProperty("url");	
	    String endpoint="/sync/wishes/addOrUpdate";
	    mainapi.PostAPI(accessToken,endpoint,fileInputStream);	    						
		}
	
	@Test(priority=26)
	 public void SyncAddUpdateCharities() throws IOException
		{

		FileInputStream fileInputStream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\main\\java\\JsonFiles\\charitiesSync.json"));	
		RestAssured.baseURI=Config.getProperty("url");	
	    String endpoint="/sync/charities/addOrUpdate";
	    mainapi.PostAPI(accessToken,endpoint,fileInputStream);	    						
		}
	
	@Test(priority=27)
	 public void SyncAddUpdateBeneficiaries() throws IOException
		{

		FileInputStream fileInputStream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\main\\java\\JsonFiles\\beneficiariesSync.json"));	
		RestAssured.baseURI=Config.getProperty("url");	
	    String endpoint="/sync/beneficiaries/addOrUpdate";
	    mainapi.PostAPI(accessToken,endpoint,fileInputStream);	    						
		}
	
	@Test(priority=28)
	 public void SyncAddUpdateWitnesses() throws IOException
		{

		FileInputStream fileInputStream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\main\\java\\JsonFiles\\witnessSync.json"));	
		RestAssured.baseURI=Config.getProperty("url");	
	    String endpoint="/sync/witnesses/addOrUpdate";
	    mainapi.PostAPI(accessToken,endpoint,fileInputStream);	    						
		}
	
	@Test(priority=29)
	 public void GenerateWill() throws IOException
		{

		FileInputStream fileInputStream = new FileInputStream(new File(System.getProperty("user.dir")+"\\src\\main\\java\\JsonFiles\\will.json"));	
		RestAssured.baseURI=Config.getProperty("url");	
	    String endpoint="/sync/will/generate";
	    mainapi.PostAPI(accessToken,endpoint,fileInputStream);	    						
		}
	
	@Test(priority=30)
	 public void UploadWillFile() throws IOException
		{

		RestAssured.baseURI=Config.getProperty("url");	
		ValidatableResponse res =
				given()
				.log().all()
				.header("Authorization",accessToken)
				.contentType("multipart/form-data")
			    .multiPart("name", "testatorDetail_signature")
			    .multiPart("file", new File("C:\\Users\\yangjee\\Desktop\\images\\B1.jpg"))
			    .multiPart("name", "testatorDetail_photo")
			    .multiPart("file", new File("C:\\Users\\yangjee\\Desktop\\images\\B1.jpg"))
			    .multiPart("name", "firstWitnessDetail_photo")
			    .multiPart("file", new File("C:\\Users\\yangjee\\Desktop\\images\\B1.jpg"))
			    .multiPart("name", "firstWitnessDetail_signature")
			    .multiPart("file", new File("C:\\Users\\yangjee\\Desktop\\images\\B1.jpg"))
			    .multiPart("name", "secondWitnessDetail_signature")
			    .multiPart("file", new File("C:\\Users\\yangjee\\Desktop\\images\\B1.jpg"))
			    .multiPart("name", "secondWitnessDetail_photo")
			.when()   
				.post("/sync/witnesses/updateFile")
			.then();

		
		Reporter.log("Response is: " + res.extract().asString(), true);
		ExtentTestManager.getTest().log(LogStatus.INFO, "Response is: " + res.extract().asString());	

		res.statusCode(200);
		res.body("message", Matchers.notNullValue());
		ExtentTestManager.getTest().log(LogStatus.INFO, "Have verified the Status Code Successfully !!");		
					
	    						
		}
	
	
}
